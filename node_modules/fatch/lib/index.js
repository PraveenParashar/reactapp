'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

require('whatwg-fetch');

var CONTENT_TYPE = 'Content-Type';
var JSON_TYPE = 'application/json';

var handleResponse = function handleResponse(response) {
  var contentType = response.headers.get(CONTENT_TYPE);
  if (contentType && contentType.includes(JSON_TYPE)) {
    return response.ok ? response.json() : response.json().then(function (error) {
      throw error;
    });
  }

  if (!response.ok) {
    throw new Error(response.statusText);
  }
  return response.text();
};

var fatch = function fatch(url, config) {
  var options = {
    method: 'GET'
  };

  if (config) {
    options.headers = config.headers || {};
    if (config.method) {
      options.method = config.method;
    }

    if (config.body) {
      if (config.body instanceof FormData) {
        // feed it the whole thing if it's a FormData instance
        options.body = config.body;
      } else {
        // add json headers if we're sending a body
        options.headers.Accept = JSON_TYPE;
        options.headers[CONTENT_TYPE] = JSON_TYPE;
        options.body = JSON.stringify(config.body);
      }
    }

    if (config.auth) {
      if ('bearer' in config.auth) {
        // set an Authorization header if a bearer token is provided
        options.headers.Authorization = 'Bearer ' + config.auth.bearer;
      } else if ('username' in config.auth && 'password' in config.auth) {
        var auth = config.auth.username + ':' + config.auth.password;
        options.headers.Authorization = 'Basic ' + btoa(auth);
      }
    }
  }

  return fetch(url, options).then(handleResponse);
};

fatch.post = function (url, options) {
  return fatch(url, _extends({}, options, {
    method: 'POST'
  }));
};

fatch.put = function (url, options) {
  return fatch(url, _extends({}, options, {
    method: 'PUT'
  }));
};

fatch.delete = function (url, options) {
  return fatch(url, _extends({}, options, {
    method: 'DELETE'
  }));
};

exports.default = fatch;